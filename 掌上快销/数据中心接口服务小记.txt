HttpApi：
	1.HttpApi是一个Controller，接收"/route"开头的所有请求，比如：localhost:18883/api/route/service/storageSupportService/getActualPrice
	2.HttpApi有一个rootHttpApi方法，只处理"/service/**"的请求，比如：localhost:18883/api/route/service/storageSupportService/getActualPrice
	3.HttpApi检查参数，有几种错误结果。如果参数匹配，将类名，方法名，参数类型数组，参数值数组通过反射去调用，如果方法执行结束前没有抛出异常，则返回成功。
	
service：
	1.HttpApi通过反射调用xxxService的方法，比如：localhost:18883/api/route/service/investedBudgetService/getInvestedBudgetInfo调用的是InvestedBudgetService的getInvestedBudgetInfo方法
	2.InvestedBudgetService是一个接口，其实就是service层，之前的HttpApi是一个唯一的Controller层。
	3.service接口位于data-center-core工程的com.laimi.data.core.service包中。
	4.InvestedBudgetServiceImpl是InvestedBudgetService的实现类，它会调用Dao层的investedBudgetMapper的getInvestedBudgetCurDateInfo方法。
	5.serivice实现位于data-center-service工程的com.laimi.data.service.impl包中。
	6.Budget是预算，Invested是花费的意思。
	7.ARDP是销售人员对其所属门店的日常维护工作，销售代表需要在一定的周期内按计划去拜访其全部的门店，按单日和整个周期考核其拜访完成情况
	8.服务分类：
		（1）InvestedBudgetService：销售中心的后台接口，用于给销售中心获取预算
		（2）AppArdpServiceImpl是手机那个蓝色app的后台接口，用于给销售代表访问门店的；ArdpServiceImpl是给web后台的
		（3）WMSSpectacularsService是仓配中心的后台接口，用于给仓配中心获取看板数据
	9.这个工程很喜欢用List<Map<String, Object>>，其实List中每一个下标就是一个对象，某个下标都有一个Map，这个Map就是一个对象，只不过不封装，好坑

Dao：
	1.InvestedBudgetMapper是Mapper类，位于data-center-service工程的com.laimi.data.dao.hadoop中，Mapper xml位于同包下的sqlmap子包中。
	2.这里的Mapper类的参数类型基本上都是一个Map<String,Object> map，返回值类型基本都是List<Map<String,Object>>，没有将参数和返回值封装成一个对象。
	但部分Mapper类的参数类型也会用到XxxExample，根据条件进行查询，部分返回值类型也有封装成对象，比如：List<StoreLoginHistory> 。
