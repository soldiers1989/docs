xxarpg:

1.指令（command）：

	（1）每条指令都有自己的main方法，运行时会执行这个指令对应的功能。比如：Kick指令踢全部已经完成登录的玩家下线；Post指令发送全服公告；Stop指令停止服务器
	（2）每个指令类都是创建一个具有该含义的Request对象，然后通过CommandHelper对象将Request对象发送出去
	（3）每个指令都是一个Command类型的对象，包含这个指令的ID（command属性），还有这个指令所属的模块（module）
	（4）ConsoleCommand管理了所有的运维管理指令，里面的指令所属的模块值都是-102。
	（5）ConsoleResult管理了指令执行的结果，有成功/失败/未知错误
	（6）ConsoleModule中管理了当前的模块MODULE_CURRENT，还有很多个当前模块下的子功能模块。
	（7）ConsoleFacade是一个接口，用来执行某个指令，ConsoleFacadeImpl是它的实现。

2.功能模块

	账号模块：
	（1）账号模块会有注册事件RegisterEvent，注册事件构造时会传入某个玩家，标志是哪个玩家注册。
	（2）账号模块有一个账号异常AccountException，AccountExceptionCode管理了各种账号异常的代码，AccountException和AccountExceptionCode一般会结合使用。
	（3）AccountFacade是账号服务门面（相当于Controller层），提供了创建账号，账号登录等方法；AccountService是账号服务（相当于Service层）。
	（4）AccountResult表示账号执行的结果，比如账号已经存在，角色已经存在，角色名非法等。
	（5）AccountModule管理了当前的模块值是12，还有很多账号模块下面的子功能模块。
	（6）AccountPush是账号推送接口，推送账号的一些状态，比如推送强制退出，推送状态变更。
	（7）Account是账户持久层实体，就是Model层。每个账号有自己的id，名称name，帐号来源渠道channel，最后登录时间loginOn等。
	（8）AccountVo是账户业务层实体。
	（9）AccountManager在启动时会保存 帐号名对应帐号标识的映射(这里面全部存放小写) （private ConcurrentMap<String, Long> name2Id = new ConcurrentHashMap<String, Long>();）
	（10）accountManager相当于Dao层，accountManager层实际上是操作EntityCacheService来操作数据库。
	（11）EntityCacheService其实就是Dao和数据库之间的一个缓存，如果某个对象已经存在EntityCacheService中，则对这个对象的修改可以直接反应到数据库上。
	（12）AccountManager加载数据库信息实际上调用了Querier对象的方法，而Querier的实现HibernateQuerier实际上调用了HibernateTemplate的方法。

	代码流程，以创建账号与角色为例：
	1.前端会根据模块值（12）定位到账号服务门面（AccountFacade），然后根据子功能模块值（1）定位到服务门面中的服务（create）。
	2.账号服务门面（AccountFacade）的实现类AccountFacadeImpl因为是Controller层，会去校验参数是否为空，一系列判断合法后，会调用accountService服务层的服务（create），
	最后给前端返回AccountResult中定义的执行结果。
	3.AccountFacadeImpl的create首先去检查这个账号名是否已经存在（loadByName(accountName)），实际上是判断账号和角色是否存在Account account = accountManager.loadByName(name);
	Player player = playerService.load(account.getId());
	4.private EntityCacheService<Long, Account> accountCache的loadOrCreate创建一个对象

	战斗模块：
	（1）角色分为：战士SOLDIER,弓箭手ARCHER,法师MAGE


	消耗模块：
	（1）消耗过程中产生的异常CostException，CostExceptionCode一般作为一个参数来构造CostException
	（2）CostExceptionType是一个枚举类型，封装了很多new出来的CostException
	（3）CostResult是消耗过程执行的结果，比如武将数量不足，武将不存在，扣减物品数量不足等
	（4）CostItem是消耗物品，有物品代码int code，还有数量long amount，附件物品类型CostType type
	（5）CostItemResult是消耗结果
	（6）CostAndReward是某次消耗中的消耗列表（Collection<CostItemResult> costs）和奖励列表的集合（Collection<RewardResult> rewards）
	（7）CostAndRewardVo是在CostAndReward的基础上附加一些对象
	（8）CostService是消耗服务接口（相当于Service层），CostServiceImpl是它的实现；Reason是消耗的原因，Player表示是哪个玩家消耗的，
	CostItem...表示消耗的物品，可以是任意个
	


	（10）CostType是消耗类型，是一个枚举类型，比如：流通货币，道具，武将装备，英雄，竞技场积分，元神，联盟经验等
	（11）一种消耗类型（CostType）可能会有多个消耗物品（CostItem）；一种消耗类型（CostType）有多个加成处理器（ICostPlus）
	
	
	（14）CostProcessorsHolder维护了每一种消耗类型（CostType）对应的ICostable，如：

	private final Map<CostType, ICostable> processors = new HashMap<CostType, ICostable>();

	（15）扣费流程：
		首先某个玩家（Player）会因为某种原因（Reason）去消耗某些物品（CostItem...）；
		根据这个原因的名称（Reason的name）获取消耗加成器处理对象（Pluser）；
		加成器处理对象（Pluser）会对某些物品（CostItem...）根据消耗类型（CostType）采用对应的加成消耗器列表（List<ICostPlus>），对这个物品的消耗进行加成；
		对某些物品（CostItem...）根据消耗类型（CostType）采用对应的消费器（ICostable），执行具体的扣费操作；

	（16）ICostable是具体的消费接口（真正会去扣东西的），HybirdCostProcessor（混合扣费）和ReplaceCostProcessor（替换扣费），ItemManager，WalletManager继承ICostable
	（17）ICostPlus是加成处理器，对某个玩家（Player）的某种消耗类型（CostType）的具体消耗内容（List<CostItem>）做减免或加成处理

	（18）Pluser是消耗加成器处理对象，每一个原因（Reason）的原因名（name）都对应一个消耗加成器处理对象（Pluser），
	由CostPlusesHolder维护这个关系，所以一般从CostPlusesHolder根据Reason的name获取这个原因（Reason）对应的消耗加成器处理对象（Pluser）；
	（19）每一个Pluser中都维护了消耗类型（CostType）和消耗加成器列表（List<ICostPlus>）的关系，说明一个消耗类型（CostType）对应多个消耗加成处理器（ICostPlus）
	（20）PlusType定义了消耗加成器（ICostPlus）的名称
	（21）Reason表示消费这些道具的原因
	
	奖励模块：



3.锁
	
	ReferenceCounterLockHolder（带计数器的可重用锁容器），里面每个id都有一把带计数器的锁（ReferenceCounterCounterLock）
	
4.事件

	（1）首先有一个命名事件接口（NamedEvent），它里面只有一个获取事件名的方法（getName）。
	（2）然后有一个身份标识事件接口（IdentityEvent），增加了一个获取发生事件的用户标识的方法（getOwner）。
	（3）针对登出事件，定义了一个登出事件接口（LogoutEvent），实现了getName方法返回自己的事件名"common:logout"，同时也实现了getOwner方法返回玩家的ID：player.getId()；
	注意登出事件接口（LogoutEvent）的构造方法valueOf改变了返回类型，返回类型并不是LogoutEvent，而是Event<LogoutEvent>，它的name是事件名，body就是LogoutEvent。
	（4）Event<T>是一个某个泛型的类，有自己的事件头（name）和事件体（body）。
	
	
	代码流程，以登出事件为例：
	1.创建一个登出事件
	
	Event<LogoutEvent> event = LogoutEvent.valueOf(player, SessionEventCause.KICK, prev);
	
	2.降登出事件发送到事件总线上
	
	// 以同步方式发出登出事件，迫使状态恢复到下线状态
	eventBus.syncPost(event);
	
5.Socket

	（1）Request<T>是一个请求对象，是一个类，每个请求有一个通信指令（Command command），还有一个消息体（T body）
	（2）SessionManager是会话管理接口。
	
6.自定义的注解

	（1）@SocketModule(MODULE)一般修饰门面类，MODULE是同包的interface中定义的常量
	（2）@SocketCommand(COMMAND_CREATE)一般修饰门面类的方法
	（3）@InBody(value = "channel", required = false)一般修饰门面类的方法的参数，value是参数的名称，required表示是否是必须传的参数，默认是必须的。
	（4）@Sync("ACCOUNT")标注方法为同步方法, 在独立线程池同步执行，value是同步键
	（5）@InSession(IDENTITY)
	（6）@Static("PlayerService.selectCountry")静态资源注入注释
	（7）自定义注解一般会有自己的属性值，属性还有默认值，实际上在某些类中（比如：TypeDefinition）会对这些自定义注解进行读取，然后根据注解的属性值的不同而做不同的处理。

7.异常
	（1）IllegalArgumentException是参数不合法异常，比如：
	
	// 参数验证
	if (items == null || items.length == 0) {
		throw new IllegalArgumentException("扣除物品不能为空");
	}


	
